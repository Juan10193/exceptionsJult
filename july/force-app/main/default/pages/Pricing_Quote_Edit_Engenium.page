<apex:page showHeader="{!NOT(isSF1)}" sideBar="false" standardStylesheets="true"
    title="Pricing Quote" standardController="IST__SuperTRUMP_Pricing_Quote__c"
    extensions="Eng_SuperTRUMPPQEditController">
    <apex:includeScript value="../../soap/ajax/29.0/connection.js" />
    <apex:includeScript value="../../soap/ajax/29.0/apex.js" />
    <apex:stylesheet value="{!URLFOR($Resource[resourceName], 'Scripts/ExtJs/resources/ext-theme-neptune/ext-theme-neptune-all-salesforce.css')}" />
    <apex:stylesheet value="{!URLFOR($Resource[resourceName], 'Resources/css/ivory-all.css')}" />

    <script src="{!URLFOR($Resource[resourceName], 'Scripts/ExtJs/ext-all.js')}" type="text/javascript" />
    
    <apex:form id="form">
        <apex:pageBlock id="pb" title="Pricing Quote Edit" helpTitle="Help for this Page" helpUrl="{!helpURL}">
            <apex:pageMessages id="editPageMessages"/>
            <apex:inputHidden value="{!transactionState}"
                id="transactionStateHidden">
                <script type="text/javascript"> var transactionStateHiddenID = "{!$Component.transactionStateHidden}"; </script>
            </apex:inputHidden>
            
            <apex:inputHidden value="{!timeZoneOffset}" id="timeZoneOffsetHidden">
                <script type="text/javascript"> var timeZoneOffsetHiddenID = "{!$Component.timeZoneOffsetHidden}"; </script>
            </apex:inputHidden>
            <apex:inputHidden value="{!sfRetData}" id="sfDataHidden">
                <script type="text/javascript"> var sfDataHiddenID = "{!$Component.sfDataHidden}"; </script>
            </apex:inputHidden>
            <apex:pageBlockButtons id="pbbuttons">
                <apex:actionFunction name="executeST_JS" action="{!executeST}" rerender="quicksave-status,editPageMessages" onComplete="actionComplete('{!actionNavigate}', '{!actionView}','{!actionURL}' );"/>
                <apex:actionFunction name="executeST_JS2" action="{!executeST}" rerender="quicksave-status,editPageMessages" onComplete="isSaving = false;"/>
                <apex:commandButton onclick="if (!doSave()) return false;" value="Save"
                    action="{!save}"
                    status="quicksave-status"
                    rerender="quicksave-status,editPageMessages"
                    oncomplete="executeST_JS();"
                />
                <apex:commandButton onclick="if (!doSave()) return false;" value="Quick Save"
                    action="{!quicksave}"
                    status="quicksave-status"
                    rerender="quicksave-status,editPageMessages"
                    oncomplete="executeST_JS2();"                    
                />
                <apex:commandButton onclick="if (!doSave()) return false;" 
                    action="{!cancel}" 
                    id="cancelButton" 
                    accesskey=""
                    oncomplete="actionComplete('{!actionNavigate}');"
                    value="Cancel" />
                <apex:commandButton onclick="if (!doSave()) return false;" value="Save As"
                    action="{!saveAs}"
                    status="quicksave-status"
                    rerender="quicksave-status,editPageMessages"
                    oncomplete="executeST_JS();"
                />
               <apex:actionStatus startText="Saving..." id="quicksave-status" startStyle="margin-left: 0.5em;" onStop="notifySaved();"/>
            </apex:pageBlockButtons>
        </apex:pageBlock>
    </apex:form>
    <a href="" id="pricing-quote-report" style="display: none;"
        target="_blank"></a>
    <script type="text/javascript">
        var isVS = false;
        var isSaving = false;
        var notifySaveTimeout;
        
        function notifySaved(){
            var notifyId = 'pb-buttons-after-ajax';
            var e = document.getElementById('{!$Component.form.pb.pbbuttons}');
            e.innerHTML = e.innerHTML + '<span id=\'' + notifyId + '\' style=\'margin-left: 0.5em;\'>Finished<span>';
            notifySaveTimeout = setTimeout(function(){
                var element = document.getElementById(notifyId);
                if (element != undefined && element != null){
                    element.parentNode.removeChild(element);
                }
            }, 3000);
        }

        sforce.connection.sessionId = "{!$Api.Session_ID}";
        isfPage = {
            sessionID: sforce.connection.sessionId,
            sfRestUrl: "{!sfURL}",
            sfNamespace: "{!sfNamespace}",
            sfQuoteId: "{!objId}",
            sfQuoteName: "{!sfQuoteName}",
            sfQuoteLabel: "{!$ObjectType.IST__SuperTRUMP_Pricing_Quote__c.Label}",
            stUrl: "{!stURL}",
            token: "{!token}",
            salesforceSecurityToken: "{!securityToken}",
            sfUserId: "{!sfUserID}",
            quoteBlob: "{!databaseTransactionState}",
            sfData: '{!JSENCODE(sfData)}',
            sfFields: '{!JSENCODE(sfDataInfo)}',
            sfDynamic: '{!JSENCODE(sfDynamic)}',
            fieldSecurityData: '{!JSENCODE(fieldSecurity)}',
            sfCustomHeaders: '{!JSENCODE(sfCustomHeaders)}',
            buildPage: function() {
                isf.offsets = [60, 240];
                var qs = new Ivory.forms.SalesForce.Engenium.QuickScreen({});
                
                IvoryExt.getBody().removeCls(['ix-body', 'ix-chrome','ix-webkit']);
                
                Ivory.hideLoadMask();
            },
            getReport: function(keys, values){
                if (Array.isArray(keys) && Array.isArray(values) && (keys.length == values.length)){
                    var map = {};
                    for (idx in keys){
                        map[keys[idx]] = values[idx];                      
                    }
                    
                    var isFile = false;

                    /*
                    STSF-21954 - In Lightning Experience and Salesforce1, submitting form triggers
                    the form unload, which notifies a user there are unsaved changes. Since we're just opening
                    a file to download, this is undesirable. When "isFile" is set to false, the file to
                    download is opened in another tab and this issue does not occur.
                    if (map && (map.Format == 'C' || map.Format == 'T'))
                        isFile = true;
                    */

                    ivory.showLoadMask();
                    Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.Eng_SuperTRUMPPQEditController.retrieveReport}', 
                        map,
                        function(result, event){
                            ivory.hideLoadMask();
                            if (event.status && result) {
                                if (isFile) {
                                /*
                                    var temp = IvoryExt.create('Ext.window.Window', {
                                        title : "iframe",
                                        width : 1,
                                        height: 1,
                                        layout : 'fit',
                                        autoRender: true,
                                        renderTo: IvoryExt.getBody(),
                                        items : [{
                                            xtype : "component",
                                            autoEl : {
                                                tag : "iframe",
                                                src : result
                                            }
                                        }]
                                    });
                                    temp.show();
                                    temp.hide();
                                    temp.destroy();
                                */
                                    var form = IvoryExt.DomHelper.append(document.body, {
                                        tag: 'form',
                                        method: 'post',
                                        action: result
                                    });
                                    document.body.appendChild(form);
                                    form.submit();
                                    document.body.removeChild(form);                                
                                } else {
                                    ivory.openWindow(result, '', 'toolbar=0,location=0,directories=0,menubar=0', true);
                                }
                            }
                            else{
                                var popupTitle = 'Report Error';
                                var output = '';
                                if (!event.status && event.message){
                                    output = event.message.replace('\n', '');
                                }
                                else{
                                    output = 'The report could not be retrieved.';
                                }
                                ivory.alert(popupTitle, output);
                            }
                        }
                    );
                }
                else{
                    ivory.alert('There was an error retrieving the report');
                }
            }
        };

        function doSave (date) {
            if (!isSaving){
                isSaving = true;
                var element = document.getElementById('pb-buttons-after-ajax');
                if (element != undefined && element != null){
                    element.parentNode.removeChild(element);
                    clearTimeout(notifySaveTimeout);
                }
                IvoryExt.fly(transactionStateHiddenID).dom.value = (isf.dataStore || isfPage.quoteBlob);
                IvoryExt.fly(timeZoneOffsetHiddenID).dom.value = new Date().getTimezoneOffset();
                IvoryExt.fly(sfDataHiddenID).dom.value = (isf.sfRetData || isfPage.sfRetData);
                return true;
            }
            return false;
        };
        
        function actionComplete (nav, view, url) { 
            isSaving = false;
            var isSF1 = ((typeof sforce != 'undefined') && sforce && sforce.one);

            if (isSF1) {
                //alert('made it '+nav+';'+view+';'+url);
                if (nav && nav == 'back') {
                    //window.history.go(-2);    //avoid a blank page
                    sforce.one.back(true);
                    //Sfdc.canvas.publisher.publish({name: "publisher.close", payload:{ refresh:"true"}});

                    return null;   
                } else if (nav) {
                    //alert('going to '+nav);
                    if (view) {
                        sforce.one.navigateToSObject(nav, view);
                    } else {
                        sforce.one.navigateToSObject(nav);
                    }
                } else if (url) {
                    sforce.one.navigateToURL(url, true);
                }
            }        
        };

        (function(Ext){
            Ext.onReady(function () {

                /* ***********************************************************
                 *  This is the form.
                 ************************************************************ */
                ivory.useLocalAJAX = false;          //true for VS, false for sf
                Ivory.isSalesforce = true;

                // Hack-ish remove class sniffers from Ext.EventManager (which attaches modrnizer type classes onto the body)
                Ext.getBody().removeCls('x-nbr x-nlg');
                Ivory.showLoadMask(0);
                Ext.defer(function () {
                    
                    if (Ext.isIE) {
                        if (Ext.isIE7) Ext.ieVersion = 7;
                        if (Ext.isIE8) Ext.ieVersion = 8;
                        if (Ext.isIE9) Ext.ieVersion = 9;
                        if (Ext.isIE10) Ext.ieVersion = 10;
                        if (Ext.isIE11) Ext.ieVersion = 11;
                        if (Ext.isIE6) Ext.ieVersion = 6;
                    }

                    // Hack-ish remove class sniffers from Ext.EventManager (which attaches modrnizer type classes onto the body)
                    Ext.supports['CSS3BorderRadius'] = true;
                    Ext.getBody().removeCls('x-nbr x-nlg');
                    Ext.getBody().removeCls('ix-nbr ix-nlg');

                    Ext.apply(Ivory.screen, {
                        screenGetStoreAction: 'openopportunity',
                        screenGetStoreParams: { OpportunityId: 1000 },
                        screenContext: "../SuperTrump/",
                        screenContextName: "supertrump"
                    });

                    // Handle any explicitly passed credentials.
                    //ivory.screen.loginName = params.u;
                    //ivory.screen.loginPassword = params.p;

                    ivory.application.isMultiPage = false;

                    ivory.localStorageReloadCheck();
                    isfPage.buildPage(); 
                }, 5);
            });
        })(this.IvoryExt);

    </script>
    <script src="{!URLFOR($Resource[resourceName], 'Scripts/ivory-all.js')}" type="text/javascript" />
    <script src="{!URLFOR($Resource[resourceName], 'Scripts/SalesforceEngenium-all.js')}" type="text/javascript" />

</apex:page>